process {
	// -------------------------------------------------------------------------------------------------
	// apply to all processes
	// -------------------------------------------------------------------------------------------------

	publishDir = [
		enabled: false]

	// -------------------------------------------------------------------------------------------------
	// merge task yaml processes
	// -------------------------------------------------------------------------------------------------

	withName: '.*:merge_tasks' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1)},
			 pattern: 'output.yaml', saveAs: {'tasks.yaml'}]]
	}

	// -------------------------------------------------------------------------------------------------
	// genome preparation processes
	// -------------------------------------------------------------------------------------------------

	withName: 'genome_preparation:.*' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1)},
			 pattern: '*', saveAs: {it=='task.yaml' ? null : it}],
			[enabled: false, mode: params.publish_mode,
			 path: {format_task_to_path(task: task)},
			 pattern: 'task.yaml', saveAs: {it}]]
	}

	// -------------------------------------------------------------------------------------------------
	// cell ranger processes
	// -------------------------------------------------------------------------------------------------

	// cell ranger
	withName: 'quantification:cell_ranger:count' {
		// publishDir = [
		// 	[enabled: true, mode: params.publish_mode,
		// 	 path: {format_task_to_path(task: task, up: 1)},
		// 	 saveAs: {
		// 	 	if(it.matches('.*/outs')) return('outs/' + id)
		// 	 	if(it.matches('.*.html')) return('reports/' + id + '.html')}]]
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1, subdirs: ['outs'])},
			 pattern: '*/outs',
			 saveAs: {opt.get('dataset id')}],
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1, subdirs: ['reports'])},
			 pattern: 'web_summary.html',
			 saveAs: {opt.get('dataset id')+'.html'}]]
	}

	// cell ranger arc
	withName: 'quantification:cell_ranger_arc:make_libraries_csv' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1)}]]
	}

	withName: 'quantification:cell_ranger_arc:count' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1, subdirs: ['outs'])},
			 pattern: '*/outs',
			 saveAs: {opt.get('dataset id')}],
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task, up: 1, subdirs: ['reports', opt.get('dataset id')])},
			 pattern: '{atac,joint,rna}_summary.html']]
	}

	// -------------------------------------------------------------------------------------------------
	// seurat processes
	// -------------------------------------------------------------------------------------------------

	// seurat + cell ranger workflow
	withName: 'seurat:prepare_cell_ranger:make_object' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task)},
			 pattern: 'seurat.rds',
			 saveAs: {opt.get('dataset id') + '.rds'}],
			[enabled: false, mode: params.publish_mode,
			 path: {format_task_to_path(task: task)},
			 pattern: 'task.yaml',
			 saveAs: {opt.get('dataset id') + '.yaml'}]]
	}

	// seurat + cell ranger arc workflow
	withName: 'seurat:prepare_cell_ranger_arc:make_object' {
		publishDir = [
			[enabled: true, mode: params.publish_mode,
			 path: {format_task_to_path(task: task)},
			 pattern: 'seurat.rds',
			 saveAs: {opt.get('dataset id') + '.rds'}],
			[enabled: false, mode: params.publish_mode,
			 path: {format_task_to_path(task: task)},
			 pattern: 'task.yaml',
			 saveAs: {opt.get('dataset id') + '.yaml'}]]
	}
}

def format_task_to_path(Map args) {
	args.up = args.up ?: 0
	args.subdirs = args.subdirs ?: []

	[params.publish_dir]
		.plus(args.task.get('process').split(':'))
		.flatten()
		.dropRight(args.up)
		.plus(args.subdirs)
		.join('/')
}
